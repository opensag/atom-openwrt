
/***********************************************************************************
File:				PhyRxAgcIfRegs.h
Module:				PhyRxAgcIf
SOC Revision:		
Purpose:
Description:		This File was auto generated using SOC Online

************************************************************************************/
#ifndef _PHY_RX_AGC_IF_REGS_H_
#define _PHY_RX_AGC_IF_REGS_H_

/*---------------------------------------------------------------------------------
/						Registers Addresses													 
/----------------------------------------------------------------------------------*/
#include "HwMemoryMap.h"

#define PHY_RX_AGC_IF_BASE_ADDRESS                             MEMORY_MAP_UNIT_9900050_BASE_ADDRESS
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF00         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2000)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF01         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2004)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF02         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2008)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF03         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x200C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF04         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2010)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF05         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2014)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF06         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2018)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF07         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x201C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF08         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2020)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF09         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2024)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF0A         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2028)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF0B         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x202C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF0C         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2030)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF0D         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2034)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF0E         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2038)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF0F         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x203C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF10         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2040)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF11         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2044)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF12         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2048)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF13         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x204C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF14         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2050)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF15         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2054)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF17         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x205C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF18         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2060)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF19         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2064)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF1A         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2068)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF1B         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x206C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF1C         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2070)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF1D         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2074)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF1E         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2078)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF1F         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x207C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF20         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2080)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF21         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2084)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF22         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2088)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF24         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2090)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF26         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2098)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF28         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20A0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF29         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20A4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF2A         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20A8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF2C         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20B0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF2D         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20B4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF2E         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20B8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF2F         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20BC)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF30         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20C0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF31         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20C4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF32         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20C8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF33         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20CC)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF34         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20D0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF35         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20D4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF36         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20D8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF38         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20E0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF39         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20E4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF3A         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20E8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF3B         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20EC)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF3C         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20F0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF3D         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20F4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF3E         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20F8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF3F         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x20FC)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF40         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2100)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF41         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2104)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF42         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2108)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF43         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x210C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF44         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2110)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF45         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2114)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF46         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2118)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF47         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x211C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF48         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2120)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF49         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2124)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF4A         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2128)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF4B         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x212C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF4C         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2130)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF4D         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2134)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF4E         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2138)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF4F         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x213C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF50         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2140)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF51         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2144)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF52         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2148)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF53         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x214C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF54         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2150)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF55         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2154)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF57         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x215C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF58         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2160)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF59         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2164)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF5A         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2168)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF5B         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x216C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF5C         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2170)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF5D         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2174)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF5E         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2178)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF5F         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x217C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF60         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2180)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF61         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2184)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF62         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2188)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF64         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2190)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF66         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2198)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF68         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21A0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF69         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21A4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF6A         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21A8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF6C         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21B0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF6D         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21B4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF6E         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21B8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF6F         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21BC)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF70         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21C0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF71         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21C4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF72         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21C8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF73         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21CC)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF74         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21D0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF75         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21D4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF76         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21D8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF78         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21E0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF79         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21E4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF7A         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21E8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF7B         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21EC)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF7C         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21F0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF7D         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21F4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF7E         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21F8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF7F         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x21FC)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF80         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2200)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF81         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2204)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF82         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2208)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF83         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x220C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF84         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2210)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF85         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2214)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF86         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2218)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF87         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x221C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF88         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2220)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF89         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2224)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF8A         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2228)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF8B         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x222C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF8C         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2230)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF8D         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2234)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF8E         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2238)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF8F         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x223C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF90         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2240)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF91         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2244)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF92         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2248)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF93         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x224C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF94         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2250)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF95         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2254)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF97         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x225C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF98         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2260)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF99         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2264)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF9A         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2268)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF9B         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x226C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF9C         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2270)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF9D         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2274)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF9E         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2278)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF9F         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x227C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFA0         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2280)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFA1         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2284)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFA2         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2288)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFA4         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2290)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFA6         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2298)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFA8         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22A0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFA9         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22A4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFAA         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22A8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFAC         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22B0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFAD         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22B4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFAE         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22B8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFAF         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22BC)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFB0         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22C0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFB1         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22C4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFB2         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22C8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFB3         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22CC)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFB4         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22D0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFB5         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22D4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFB6         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22D8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFB8         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22E0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFB9         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22E4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFBA         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22E8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFBB         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22EC)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFBC         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22F0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFBD         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22F4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFBE         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22F8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFBF         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x22FC)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC0         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2300)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC1         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2304)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC2         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2308)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC3         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x230C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC4         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2310)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC5         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2314)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC6         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2318)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC7         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x231C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC8         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2320)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC9         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2324)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFCA         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2328)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFCB         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x232C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFCC         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2330)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFCD         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2334)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFCE         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2338)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFCF         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x233C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFD0         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2340)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFD1         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2344)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFD2         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2348)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFD3         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x234C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFD4         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2350)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFD5         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2354)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFD7         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x235C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFD8         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2360)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFD9         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2364)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFDA         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2368)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFDB         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x236C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFDC         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2370)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFDD         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2374)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFDE         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2378)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFDF         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x237C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFE0         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2380)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFE1         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2384)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFE2         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2388)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFE4         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2390)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFE6         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2398)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFE8         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23A0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFE9         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23A4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFEA         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23A8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFEC         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23B0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFED         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23B4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFEE         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23B8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFEF         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23BC)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFF0         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23C0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFF1         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23C4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFF2         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23C8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFF3         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23CC)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFF4         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23D0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFF5         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23D4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFF6         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23D8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFF8         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23E0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFF9         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23E4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFFA         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23E8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFFB         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23EC)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFFC         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23F0)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFFD         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23F4)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFFE         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23F8)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IFFF         (PHY_RX_AGC_IF_BASE_ADDRESS + 0x23FC)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF100        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2400)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF101        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2404)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF102        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2408)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF103        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x240C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF104        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2410)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF105        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2414)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF106        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2418)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF107        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x241C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF108        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2420)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF109        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2424)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF10A        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2428)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF10B        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x242C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF10C        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2430)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF10D        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2434)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF10E        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2438)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF10F        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x243C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF110        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2440)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF111        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2444)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF112        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2448)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF113        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x244C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF114        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2450)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF115        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2454)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF116        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2458)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF117        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x245C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF118        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2460)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF119        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2464)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF11A        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2468)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF11B        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x246C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF11C        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2470)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF11D        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2474)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF11E        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2478)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF11F        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x247C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF120        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2480)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF121        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2484)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF122        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2488)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF123        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x248C)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF124        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2490)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF125        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2494)
#define	REG_PHY_RX_AGC_IF_PHY_RXAGC_IF126        (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2498)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC140    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2500)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC141    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2504)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC142    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2508)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC149    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2524)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC14A    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2528)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC14B    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x252C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC14C    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2530)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC14D    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2534)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC14E    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2538)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC14F    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x253C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC150    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2540)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC151    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2544)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC152    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2548)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC157    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x255C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC158    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2560)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC159    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2564)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC15A    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2568)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC15B    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x256C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC163    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x258C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC164    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2590)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC165    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2594)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC166    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2598)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC167    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x259C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC168    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x25A0)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC16A    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x25A8)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC16B    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x25AC)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC16C    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x25B0)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC16D    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x25B4)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC16F    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x25BC)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC170    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x25C0)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC171    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x25C4)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC17A    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x25E8)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC17B    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x25EC)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC17C    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x25F0)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC17D    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x25F4)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC17E    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x25F8)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC17F    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x25FC)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC180    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2600)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC181    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2604)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC182    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2608)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC183    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x260C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC184    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2610)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC185    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2614)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC186    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2618)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC187    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x261C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC188    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2620)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC189    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2624)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC18A    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2628)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC18B    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x262C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC18C    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2630)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC18D    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2634)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC18E    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2638)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC18F    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x263C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC190    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2640)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC191    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2644)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC192    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2648)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC193    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x264C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC194    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2650)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC195    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2654)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC196    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2658)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC197    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x265C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC198    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2660)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC199    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2664)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1A6    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2698)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1A7    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x269C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1A8    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26A0)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1A9    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26A4)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1AA    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26A8)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1AB    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26AC)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1AC    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26B0)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1AD    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26B4)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1AE    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26B8)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1AF    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26BC)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1B0    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26C0)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1B1    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26C4)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1B3    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26CC)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1B4    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26D0)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1B5    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26D4)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1B6    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26D8)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1B7    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26DC)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1B8    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26E0)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1B9    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26E4)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1BA    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26E8)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1BB    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26EC)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1BC    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26F0)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1BD    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26F4)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1BE    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26F8)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1BF    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x26FC)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C0    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2700)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C1    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2704)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C2    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2708)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C3    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x270C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C4    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2710)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C5    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2714)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C6    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2718)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C7    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x271C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C8    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2720)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C9    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2724)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1CA    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2728)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1CB    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x272C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1CC    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2730)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1CD    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2734)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1CE    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2738)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1CF    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x273C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D0    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2740)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D1    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2744)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D2    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2748)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D3    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x274C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D4    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2750)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D5    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2754)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D6    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2758)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D7    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x275C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D8    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2760)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D9    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2764)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E0    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2780)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E1    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2784)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E2    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2788)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E3    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x278C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E4    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2790)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E5    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2794)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E6    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2798)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E7    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x279C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E8    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27A0)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E9    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27A4)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1EA    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27A8)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1EB    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27AC)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1EC    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27B0)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1ED    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27B4)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1EE    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27B8)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1EF    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27BC)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F0    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27C0)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F1    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27C4)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F2    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27C8)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F3    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27CC)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F4    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27D0)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F5    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27D4)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F6    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27D8)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F7    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27DC)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F8    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27E0)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F9    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27E4)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1FA    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27E8)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1FB    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27EC)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1FC    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27F0)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1FD    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27F4)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1FE    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27F8)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1FF    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x27FC)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC200    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2800)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC201    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2804)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC202    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2808)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC203    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x280C)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC204    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2810)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC205    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2814)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC206    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x2818)
#define	REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC207    (PHY_RX_AGC_IF_BASE_ADDRESS + 0x281C)
/*---------------------------------------------------------------------------------
/						Data Type Definition										
/----------------------------------------------------------------------------------*/
/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF00 0x2000 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1RssiAdd : 9; //Rx AGC ant1 rssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf00_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF01 0x2004 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1TssiAdd : 9; //Rx AGC ant1 tssi, reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf01_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF02 0x2008 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1BbRssiAdd : 9; //Rx AGC ant1 bb_rssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf02_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF03 0x200C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1BbSrssiAdd : 9; //Rx AGC ant1 bb_srssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf03_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF04 0x2010 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1BbRssiSlowLowThrCalc : 9; //Rx AGC ant1 bb rssi slow low threshold calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf04_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF05 0x2014 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1BbPowerUpThrCalc : 9; //Rx AGC ant1 bb power up threshold calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf05_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF06 0x2018 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1RfPowerAdd : 10; //Rx AGC Ant 1 RSSI + LNA gain 1dB resolution, reset value: 0x0, access type: ROS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf06_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF07 0x201C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1RfPower2Add : 10; //Rx AGC Ant 1 RSSI + LNA gain 0.5dB resolution, reset value: 0x0, access type: ROS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf07_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF08 0x2020 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1BbPowerAdd : 9; //Rx AGC ant1 bb_power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf08_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF09 0x2024 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1SbbPowerAdd : 9; //Rx AGC ant1 sbb_power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf09_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF0A 0x2028 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1MeanBbIAdd : 12; //Rx AGC ant1 I dc power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf0A_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF0B 0x202C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1MeanBbQAdd : 12; //Rx AGC ant1 Q dc power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf0B_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF0C 0x2030 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1InbandRssiAdd : 9; //Rx AGC ant1 inband rssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf0C_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF0D 0x2034 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1SinbandRssiAdd : 9; //Rx AGC ant1 slow inband rssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf0D_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF0E 0x2038 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1InbandPowerAdd : 9; //Rx AGC ant1 inband power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf0E_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF0F 0x203C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1SinbandPowerAdd : 9; //Rx AGC ant1 slow inband power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf0F_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF10 0x2040 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1Dd1Add : 9; //Rx AGC ant1 inband rssi d1 value (rssi(2)-rssi(1)), reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf10_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF11 0x2044 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1Dd2Add : 9; //Rx AGC ant1 inband rssi d2 value (rssi(3)-rssi(2)), reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf11_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF12 0x2048 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1InbandUpThrCalc : 9; //Rx AGC ant1 inband up threshold calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf12_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF13 0x204C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1InbandLowThrCalc : 9; //Rx AGC ant1 inband low threshold calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf13_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF14 0x2050 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1B1Add : 9; //Rx AGC ant1 bb_rssi b1 value, reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf14_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF15 0x2054 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1B2Add : 9; //Rx AGC ant1 bb_rssi b2 value , reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf15_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF17 0x205C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1InbandUpThrAdd : 9; //Rx AGC ant1 inband up threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf17_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF18 0x2060 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1InbandLowThrAdd : 9; //Rx AGC ant1 inband low threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf18_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF19 0x2064 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1InbandTimerThrAdd : 16; //Rx AGC ant1 inband timer threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf19_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF1A 0x2068 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1InbandDeltaThrAdd : 9; //Rx AGC ant1 inband delta threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf1A_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF1B 0x206C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1InbandReleaseThrAdd : 16; //Rx AGC ant1 inband release threshold, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf1B_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF1C 0x2070 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1InbandLongthermThrAdd : 9; //Rx AGC ant1 inband longterm threshold , reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf1C_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF1D 0x2074 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1BbTimerThrAdd : 16; //Rx AGC ant1 bb timer threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf1D_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF1E 0x2078 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1DeltaBbThrAdd : 9; //Rx AGC ant1 delta bb threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf1E_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF1F 0x207C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1Rssi1Offset1Add : 10; //Rx AGC ant1 rssi offset1 bw1, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf1F_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF20 0x2080 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1Rssi2Offset1Add : 10; //Rx AGC ant1 rssi offset1 bw2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf20_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF21 0x2084 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1Rssi3Offset1Add : 10; //Rx AGC ant1 rssi offset1 bw3, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf21_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF22 0x2088 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1LnaGainAdd : 3; //Current LNA Gain, reset value: 0x0, access type: RW
		uint32 reserved0 : 29;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf22_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF24 0x2090 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1BbReleaseThrAdd : 16; //Rx AGC ant1 bb release threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf24_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF26 0x2098 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1LongthermReleaseThrAdd : 16; //Rx AGC ant1 longterm release threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf26_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF28 0x20A0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1BbPowerUpThrAdd : 9; //Rx AGC ant1 bb power up threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf28_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF29 0x20A4 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1AccAlgoCntrAdd : 16; //Rx AGC ant1 accelerator algorithm control, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf29_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF2A 0x20A8 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1AccOutAdd : 9; //Rx AGC ant1 accelerator output, reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf2A_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF2C 0x20B0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1Rssi1Offset2Add : 8; //Rx AGC ant1 rssi offset2 for bw1, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf2C_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF2D 0x20B4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1Rssi2Offset2Add : 8; //Rx AGC ant1 rssi offset2 for bw2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf2D_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF2E 0x20B8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1Rssi3Offset2Add : 8; //Rx AGC ant1 rssi offset2 for bw3, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf2E_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF2F 0x20BC */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1BbRssiDcOffsetIAdd : 12; //Rx AGC ant1 bb rssi dc offset 1, reset value: 0x0, access type: RWS
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf2F_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF30 0x20C0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1BbRssiDcOffsetQAdd : 12; //Rx AGC ant1 bb rssi dc offset 2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf30_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF31 0x20C4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1BbRssiSlowLowThrAdd : 9; //Rx AGC ant1 bb rssi slow low threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf31_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF32 0x20C8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1BbRssiFastLowThrAdd : 9; //Rx AGC ant1 bb rssi fast low threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf32_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF33 0x20CC */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1InbandRssiOffset1Add : 16; //Rx AGC ant1 ib rssi offset 1, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf33_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF34 0x20D0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1InbandRssiOffset2Add : 8; //Rx AGC ant1 ib rssi offset 2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf34_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF35 0x20D4 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1BbRssiOffset1Add : 16; //Rx AGC ant1 bb rssi offset 1, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf35_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF36 0x20D8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1BbRssiOffset2Add : 8; //Rx AGC ant1 bb rssi offset 2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf36_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF38 0x20E0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1LnaAdd : 9; //Rx AGC ant1 lna, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf38_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF39 0x20E4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1SystemGainAdd : 9; //Rx AGC ant1 system gain, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf39_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF3A 0x20E8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1InbandSystemGainAdd : 9; //Rx AGC ant1 inband system gain, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf3A_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF3B 0x20EC */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1SystemGainCcaAdd : 8; //Rx AGC ant1 system gain dc cca, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf3B_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF3C 0x20F0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1LnaCalc : 9; //Rx AGC ant1 lna calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf3C_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF3D 0x20F4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1SystemGainCalc : 9; //Rx AGC ant1 system gain calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf3D_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF3E 0x20F8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1InbandSystemGainCalc : 9; //Rx AGC ant1 inband system gain calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf3E_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF3F 0x20FC */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1SystemGainCcaCalc : 8; //Rx AGC ant1 system gain dc cca, reset value: 0x0, access type: ROS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf3F_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF40 0x2100 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2RssiAdd : 9; //Rx AGC ant2 rssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf40_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF41 0x2104 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2TssiAdd : 9; //Rx AGC ant2 tssi, reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf41_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF42 0x2108 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2BbRssiAdd : 9; //Rx AGC ant2 bb_rssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf42_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF43 0x210C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2BbSrssiAdd : 9; //Rx AGC ant2 bb_srssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf43_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF44 0x2110 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2BbRssiSlowLowThrCalc : 9; //Rx AGC ant2 bb rssi slow low threshold calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf44_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF45 0x2114 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2BbPowerUpThrCalc : 9; //Rx AGC ant2 bb power up threshold calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf45_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF46 0x2118 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2RfPowerAdd : 10; //Rx AGC ant2 rf_power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf46_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF47 0x211C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2RfPower2Add : 10; //Rx AGC Ant 2 RSSI + LNA gain 0.5dB resolution, reset value: 0x0, access type: ROS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf47_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF48 0x2120 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2BbPowerAdd : 9; //Rx AGC ant2 bb_power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf48_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF49 0x2124 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2SbbPowerAdd : 9; //Rx AGC ant2 sbb_power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf49_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF4A 0x2128 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2MeanBbIAdd : 12; //Rx AGC ant2 I dc power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf4A_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF4B 0x212C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2MeanBbQAdd : 12; //Rx AGC ant2 Q dc power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf4B_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF4C 0x2130 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2InbandRssiAdd : 9; //Rx AGC ant2 inband rssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf4C_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF4D 0x2134 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2SinbandRssiAdd : 9; //Rx AGC ant2 slow inband rssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf4D_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF4E 0x2138 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2InbandPowerAdd : 9; //Rx AGC ant2 inband power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf4E_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF4F 0x213C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2SinbandPowerAdd : 9; //Rx AGC ant2 slow inband power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf4F_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF50 0x2140 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2Dd1Add : 9; //Rx AGC ant2 inband rssi d1 value (rssi(2)-rssi(1)), reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf50_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF51 0x2144 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2Dd2Add : 9; //Rx AGC ant2 inband rssi d2 value (rssi(3)-rssi(2)), reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf51_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF52 0x2148 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2InbandUpThrCalc : 9; //Rx AGC ant2 inband up threshold calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf52_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF53 0x214C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2InbandLowThrCalc : 9; //Rx AGC ant2 inband low threshold calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf53_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF54 0x2150 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2B1Add : 9; //Rx AGC ant2 bb_rssi b1 value, reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf54_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF55 0x2154 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2B2Add : 9; //Rx AGC ant2 bb_rssi b2 value , reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf55_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF57 0x215C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2InbandUpThrAdd : 9; //Rx AGC ant2 inband up threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf57_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF58 0x2160 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2InbandLowThrAdd : 9; //Rx AGC ant2 inband low threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf58_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF59 0x2164 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2InbandTimerThrAdd : 16; //Rx AGC ant2 inband timer threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf59_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF5A 0x2168 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2InbandDeltaThrAdd : 9; //Rx AGC ant2 inband delta threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf5A_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF5B 0x216C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2InbandReleaseThrAdd : 16; //Rx AGC ant2 inband release threshold, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf5B_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF5C 0x2170 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2InbandLongthermThrAdd : 9; //Rx AGC ant2 inband longterm threshold , reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf5C_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF5D 0x2174 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2BbTimerThrAdd : 16; //Rx AGC ant2 bb timer threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf5D_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF5E 0x2178 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2DeltaBbThrAdd : 9; //Rx AGC ant2 delta bb threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf5E_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF5F 0x217C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2Rssi1Offset1Add : 10; //Rx AGC ant2 rssi offset1 bw1, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf5F_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF60 0x2180 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2Rssi2Offset1Add : 10; //Rx AGC ant2 rssi offset1 bw2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf60_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF61 0x2184 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2Rssi3Offset1Add : 10; //Rx AGC ant2 rssi offset1 bw3, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf61_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF62 0x2188 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2LnaGainAdd : 3; //Current LNA Gain, reset value: 0x0, access type: RW
		uint32 reserved0 : 29;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf62_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF64 0x2190 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2BbReleaseThrAdd : 16; //Rx AGC ant2 bb release threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf64_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF66 0x2198 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2LongthermReleaseThrAdd : 16; //Rx AGC ant2 longterm release threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf66_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF68 0x21A0 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2BbPowerUpThrAdd : 9; //Rx AGC ant2 bb power up threshold, reset value: 0x0, access type: WO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf68_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF69 0x21A4 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2AccAlgoCntrAdd : 16; //Rx AGC ant2 accelerator algorithm control, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf69_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF6A 0x21A8 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2AccOutAdd : 9; //Rx AGC ant2 accelerator output, reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf6A_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF6C 0x21B0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2Rssi1Offset2Add : 8; //Rx AGC ant2 rssi offset2 for bw1, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf6C_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF6D 0x21B4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2Rssi2Offset2Add : 8; //Rx AGC ant2 rssi offset2 for bw2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf6D_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF6E 0x21B8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2Rssi3Offset2Add : 8; //Rx AGC ant2 rssi offset2 for bw3, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf6E_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF6F 0x21BC */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2BbRssiDcOffsetIAdd : 12; //Rx AGC ant2 bb rssi dc offset 1, reset value: 0x0, access type: RWS
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf6F_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF70 0x21C0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2BbRssiDcOffsetQAdd : 12; //Rx AGC ant2 bb rssi dc offset 2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf70_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF71 0x21C4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2BbRssiSlowLowThrAdd : 9; //Rx AGC ant2 bb rssi slow low threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf71_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF72 0x21C8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2BbRssiFastLowThrAdd : 9; //Rx AGC ant2 bb rssi fast low threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf72_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF73 0x21CC */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2InbandRssiOffset1Add : 16; //Rx AGC ant2 ib rssi offset 1, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf73_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF74 0x21D0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2InbandRssiOffset2Add : 8; //Rx AGC ant2 ib rssi offset 2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf74_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF75 0x21D4 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2BbRssiOffset1Add : 16; //Rx AGC ant2 bb rssi offset 1, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf75_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF76 0x21D8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2BbRssiOffset2Add : 8; //Rx AGC ant2 bb rssi offset 2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf76_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF78 0x21E0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2LnaAdd : 9; //Rx AGC ant2 lna, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf78_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF79 0x21E4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2SystemGainAdd : 9; //Rx AGC ant2 system gain, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf79_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF7A 0x21E8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2InbandSystemGainAdd : 9; //Rx AGC ant2 inband system gain, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf7A_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF7B 0x21EC */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2SystemGainCcaAdd : 8; //Rx AGC ant2 system gain dc cca, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf7B_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF7C 0x21F0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2LnaCalc : 9; //Rx AGC ant2 lna calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf7C_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF7D 0x21F4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2SystemGainCalc : 9; //Rx AGC ant2 system gain calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf7D_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF7E 0x21F8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2InbandSystemGainCalc : 9; //Rx AGC ant2 inband system gain calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf7E_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF7F 0x21FC */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2SystemGainCcaCalc : 8; //Rx AGC ant2 system gain dc cca calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf7F_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF80 0x2200 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3RssiAdd : 9; //Rx AGC ant3 rssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf80_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF81 0x2204 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3TssiAdd : 9; //Rx AGC ant3 tssi, reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf81_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF82 0x2208 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3BbRssiAdd : 9; //Rx AGC ant3 bb_rssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf82_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF83 0x220C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3BbSrssiAdd : 9; //Rx AGC ant3 bb_srssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf83_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF84 0x2210 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3BbRssiSlowLowThrCalc : 9; //Rx AGC ant3 bb rssi slow low threshold calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf84_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF85 0x2214 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3BbPowerUpThrCalc : 9; //Rx AGC ant3 bb power up threshold calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf85_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF86 0x2218 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3RfPowerAdd : 10; //Rx AGC ant3 rf_power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf86_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF87 0x221C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3RfPower2Add : 10; //Rx AGC Ant 3 RSSI + LNA gain 0.5dB resolution, reset value: 0x0, access type: ROS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf87_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF88 0x2220 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3BbPowerAdd : 9; //Rx AGC ant3 bb_power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf88_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF89 0x2224 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3SbbPowerAdd : 9; //Rx AGC ant3 sbb_power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf89_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF8A 0x2228 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3MeanBbIAdd : 12; //Rx AGC ant3 I dc power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf8A_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF8B 0x222C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3MeanBbQAdd : 12; //Rx AGC ant3 Q dc power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf8B_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF8C 0x2230 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3InbandRssiAdd : 9; //Rx AGC ant3 inband rssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf8C_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF8D 0x2234 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3SinbandRssiAdd : 9; //Rx AGC ant3 slow inband rssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf8D_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF8E 0x2238 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3InbandPowerAdd : 9; //Rx AGC ant3 inband power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf8E_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF8F 0x223C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3SinbandPowerAdd : 9; //Rx AGC ant3 slow inband power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf8F_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF90 0x2240 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3Dd1Add : 9; //Rx AGC ant3 inband rssi d1 value (rssi(2)-rssi(1)), reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf90_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF91 0x2244 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3Dd2Add : 9; //Rx AGC ant3 inband rssi d2 value (rssi(3)-rssi(2)), reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf91_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF92 0x2248 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3InbandUpThrCalc : 9; //Rx AGC ant3 inband up threshold calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf92_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF93 0x224C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3InbandLowThrCalc : 9; //Rx AGC ant3 inband low threshold calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf93_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF94 0x2250 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3B1Add : 9; //Rx AGC ant3 bb_rssi b1 value, reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf94_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF95 0x2254 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3B2Add : 9; //Rx AGC ant3 bb_rssi b2 value , reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf95_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF97 0x225C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3InbandUpThrAdd : 9; //Rx AGC ant3 inband up threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf97_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF98 0x2260 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3InbandLowThrAdd : 9; //Rx AGC ant3 inband low threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf98_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF99 0x2264 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3InbandTimerThrAdd : 16; //Rx AGC ant3 inband timer threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf99_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF9A 0x2268 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3InbandDeltaThrAdd : 9; //Rx AGC ant3 inband delta threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf9A_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF9B 0x226C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3InbandReleaseThrAdd : 16; //Rx AGC ant3 inband release threshold, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf9B_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF9C 0x2270 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3InbandLongthermThrAdd : 9; //Rx AGC ant3 inband longterm threshold , reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf9C_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF9D 0x2274 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3BbTimerThrAdd : 16; //Rx AGC ant3 bb timer threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf9D_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF9E 0x2278 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3DeltaBbThrAdd : 9; //Rx AGC ant3 delta bb threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf9E_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF9F 0x227C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3Rssi1Offset1Add : 10; //Rx AGC ant3 rssi offset1 bw1, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf9F_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFA0 0x2280 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3Rssi2Offset1Add : 10; //Rx AGC ant3 rssi offset1 bw2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfa0_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFA1 0x2284 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3Rssi3Offset1Add : 10; //Rx AGC ant3 rssi offset1 bw3, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfa1_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFA2 0x2288 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3LnaGainAdd : 3; //Current LNA Gain, reset value: 0x0, access type: RW
		uint32 reserved0 : 29;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfa2_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFA4 0x2290 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3BbReleaseThrAdd : 16; //Rx AGC ant3 bb release threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfa4_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFA6 0x2298 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3LongthermReleaseThrAdd : 16; //Rx AGC ant3 longterm release threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfa6_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFA8 0x22A0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3BbPowerUpThrAdd : 9; //Rx AGC ant3 bb power up threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfa8_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFA9 0x22A4 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3AccAlgoCntrAdd : 16; //Rx AGC ant3 accelerator algorithm control, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfa9_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFAA 0x22A8 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3AccOutAdd : 9; //Rx AGC ant3 accelerator output, reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfaa_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFAC 0x22B0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3Rssi1Offset2Add : 8; //Rx AGC ant3 rssi offset2 for bw1, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfac_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFAD 0x22B4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3Rssi2Offset2Add : 8; //Rx AGC ant3 rssi offset2 for bw2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfad_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFAE 0x22B8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3Rssi3Offset2Add : 8; //Rx AGC ant3 rssi offset2 for bw3, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfae_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFAF 0x22BC */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3BbRssiDcOffsetIAdd : 12; //Rx AGC ant3 bb rssi dc offset 1, reset value: 0x0, access type: RWS
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfaf_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFB0 0x22C0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3BbRssiDcOffsetQAdd : 12; //Rx AGC ant3 bb rssi dc offset 2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfb0_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFB1 0x22C4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3BbRssiSlowLowThrAdd : 9; //Rx AGC ant3 bb rssi slow low threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfb1_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFB2 0x22C8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3BbRssiFastLowThrAdd : 9; //Rx AGC ant3 bb rssi fast low threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfb2_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFB3 0x22CC */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3InbandRssiOffset1Add : 16; //Rx AGC ant3 ib rssi offset 1, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfb3_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFB4 0x22D0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3InbandRssiOffset2Add : 8; //Rx AGC ant3 ib rssi offset 2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfb4_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFB5 0x22D4 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3BbRssiOffset1Add : 16; //Rx AGC ant3 bb rssi offset 1, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfb5_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFB6 0x22D8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3BbRssiOffset2Add : 8; //Rx AGC ant3 bb rssi offset 2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfb6_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFB8 0x22E0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3LnaAdd : 9; //Rx AGC ant3 lna, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfb8_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFB9 0x22E4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3SystemGainAdd : 9; //Rx AGC ant3 system gain, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfb9_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFBA 0x22E8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3InbandSystemGainAdd : 9; //Rx AGC ant3 inband system gain, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfba_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFBB 0x22EC */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3SystemGainCcaAdd : 8; //Rx AGC ant3 system gain dc cca, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfbb_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFBC 0x22F0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3LnaCalc : 9; //Rx AGC ant3 lna calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfbc_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFBD 0x22F4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3SystemGainCalc : 9; //Rx AGC ant3 system gain calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfbd_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFBE 0x22F8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3InbandSystemGainCalc : 9; //Rx AGC ant3 inband system gain calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfbe_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFBF 0x22FC */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3SystemGainCcaCalc : 8; //Rx AGC ant3 system gain dc cca calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfbf_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC0 0x2300 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4RssiAdd : 9; //Rx AGC ant4 rssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfc0_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC1 0x2304 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant4TssiAdd : 9; //Rx AGC ant4 tssi, reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfc1_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC2 0x2308 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4BbRssiAdd : 9; //Rx AGC ant4 bb_rssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfc2_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC3 0x230C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4BbSrssiAdd : 9; //Rx AGC ant4 bb_srssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfc3_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC4 0x2310 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4BbRssiSlowLowThrCalc : 9; //Rx AGC ant4 bb rssi slow low threshold calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfc4_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC5 0x2314 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4BbPowerUpThrCalc : 9; //Rx AGC ant4 bb power up threshold calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfc5_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC6 0x2318 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4RfPowerAdd : 10; //Rx AGC ant4 rf_power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfc6_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC7 0x231C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4RfPower2Add : 10; //Rx AGC Ant 4 RSSI + LNA gain 0.5dB resolution, reset value: 0x0, access type: ROS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfc7_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC8 0x2320 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4BbPowerAdd : 9; //Rx AGC ant4 bb_power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfc8_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFC9 0x2324 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4SbbPowerAdd : 9; //Rx AGC ant4 sbb_power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfc9_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFCA 0x2328 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4MeanBbIAdd : 12; //Rx AGC ant4 I dc power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfca_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFCB 0x232C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4MeanBbQAdd : 12; //Rx AGC ant4 Q dc power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfcb_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFCC 0x2330 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4InbandRssiAdd : 9; //Rx AGC ant4 inband rssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfcc_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFCD 0x2334 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4SinbandRssiAdd : 9; //Rx AGC ant4 slow inband rssi, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfcd_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFCE 0x2338 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4InbandPowerAdd : 9; //Rx AGC ant4 inband power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfce_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFCF 0x233C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4SinbandPowerAdd : 9; //Rx AGC ant4 slow inband power, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfcf_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFD0 0x2340 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant4Dd1Add : 9; //Rx AGC ant4 inband rssi d1 value (rssi(2)-rssi(1)), reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfd0_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFD1 0x2344 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant4Dd2Add : 9; //Rx AGC ant4 inband rssi d2 value (rssi(3)-rssi(2)), reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfd1_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFD2 0x2348 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4InbandUpThrCalc : 9; //Rx AGC ant4 inband up threshold calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfd2_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFD3 0x234C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4InbandLowThrCalc : 9; //Rx AGC ant4 inband low threshold calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfd3_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFD4 0x2350 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant4B1Add : 9; //Rx AGC ant4 bb_rssi b1 value, reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfd4_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFD5 0x2354 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant4B2Add : 9; //Rx AGC ant4 bb_rssi b2 value , reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfd5_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFD7 0x235C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4InbandUpThrAdd : 9; //Rx AGC ant4 inband up threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfd7_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFD8 0x2360 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4InbandLowThrAdd : 9; //Rx AGC ant4 inband low threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfd8_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFD9 0x2364 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant4InbandTimerThrAdd : 16; //Rx AGC ant4 inband timer threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfd9_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFDA 0x2368 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant4InbandDeltaThrAdd : 9; //Rx AGC ant4 inband delta threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfda_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFDB 0x236C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant4InbandReleaseThrAdd : 16; //Rx AGC ant4 inband release threshold, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfdb_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFDC 0x2370 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4InbandLongthermThrAdd : 9; //Rx AGC ant4 inband longterm threshold , reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfdc_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFDD 0x2374 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant4BbTimerThrAdd : 16; //Rx AGC ant4 bb timer threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfdd_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFDE 0x2378 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant4DeltaBbThrAdd : 9; //Rx AGC ant4 delta bb threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfde_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFDF 0x237C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4Rssi1Offset1Add : 10; //Rx AGC ant4 rssi offset1 bw1, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfdf_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFE0 0x2380 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4Rssi2Offset1Add : 10; //Rx AGC ant4 rssi offset1 bw2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfe0_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFE1 0x2384 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4Rssi3Offset1Add : 10; //Rx AGC ant4 rssi offset1 bw3, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfe1_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFE2 0x2388 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant4LnaGainAdd : 3; //Current LNA Gain, reset value: 0x0, access type: RW
		uint32 reserved0 : 29;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfe2_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFE4 0x2390 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant4BbReleaseThrAdd : 16; //Rx AGC ant4 bb release threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfe4_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFE6 0x2398 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant4LongthermReleaseThrAdd : 16; //Rx AGC ant4 longterm release threshold , reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfe6_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFE8 0x23A0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4BbPowerUpThrAdd : 9; //Rx AGC ant4 bb power up threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfe8_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFE9 0x23A4 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant4AccAlgoCntrAdd : 16; //Rx AGC ant4 accelerator algorithm control, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfe9_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFEA 0x23A8 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant4AccOutAdd : 9; //Rx AGC ant4 accelerator output, reset value: 0x0, access type: RO
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfea_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFEC 0x23B0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4Rssi1Offset2Add : 8; //Rx AGC ant4 rssi offset2 for bw1, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfec_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFED 0x23B4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4Rssi2Offset2Add : 8; //Rx AGC ant4 rssi offset2 for bw2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfed_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFEE 0x23B8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4Rssi3Offset2Add : 8; //Rx AGC ant4 rssi offset2 for bw3, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfee_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFEF 0x23BC */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4BbRssiDcOffsetIAdd : 12; //Rx AGC ant4 bb rssi dc offset 1, reset value: 0x0, access type: RWS
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfef_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFF0 0x23C0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4BbRssiDcOffsetQAdd : 12; //Rx AGC ant4 bb rssi dc offset 2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIff0_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFF1 0x23C4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4BbRssiSlowLowThrAdd : 9; //Rx AGC ant4 bb rssi slow low threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIff1_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFF2 0x23C8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4BbRssiFastLowThrAdd : 9; //Rx AGC ant4 bb rssi fast low threshold, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIff2_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFF3 0x23CC */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant4InbandRssiOffset1Add : 16; //Rx AGC ant4 ib rssi offset 1, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIff3_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFF4 0x23D0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4InbandRssiOffset2Add : 8; //Rx AGC ant4 ib rssi offset 2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIff4_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFF5 0x23D4 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant4BbRssiOffset1Add : 16; //Rx AGC ant4 bb rssi offset 1, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIff5_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFF6 0x23D8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4BbRssiOffset2Add : 8; //Rx AGC ant4 bb rssi offset 2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIff6_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFF8 0x23E0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4LnaAdd : 9; //Rx AGC ant4 lna, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIff8_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFF9 0x23E4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4SystemGainAdd : 9; //Rx AGC ant4 system gain, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIff9_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFFA 0x23E8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4InbandSystemGainAdd : 9; //Rx AGC ant4 inband system gain, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIffa_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFFB 0x23EC */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4SystemGainCcaAdd : 8; //Rx AGC ant4 system gain dc cca, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIffb_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFFC 0x23F0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4LnaCalc : 9; //Rx AGC ant4 lna calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIffc_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFFD 0x23F4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4SystemGainCalc : 9; //Rx AGC ant4 system gain calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIffd_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFFE 0x23F8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4InbandSystemGainCalc : 9; //Rx AGC ant4 inband system gain calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIffe_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IFFF 0x23FC */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4SystemGainCcaCalc : 8; //Rx AGC ant4 system gain dc cca calc, reset value: 0x0, access type: ROS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIfff_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF100 0x2400 */
typedef union
{
	uint32 val;
	struct
	{
		int32  maxRfPowerAdd : 10; //The maximum from all antennas of RF_POWER, reset value: 0x0, access type: ROS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf100_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF101 0x2404 */
typedef union
{
	uint32 val;
	struct
	{
		int32  maxBbPowerAdd : 9; //The maximum from all antennas of BB_POWER, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf101_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF102 0x2408 */
typedef union
{
	uint32 val;
	struct
	{
		int32  maxInbandPowerAdd : 9; //The maximum from all antennas of inband_POWER, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf102_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF103 0x240C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 rssiSatAdd : 15; //rssi_sat_add, reset value: 0x0, access type: RO
		uint32 reserved0 : 17;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf103_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF104 0x2410 */
typedef union
{
	uint32 val;
	struct
	{
		int32  bbRssiSatThr : 9; //Threshold for saturation on BB_RSSI, reset value: 0x1FC, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf104_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF105 0x2414 */
typedef union
{
	uint32 val;
	struct
	{
		int32  rfPowerSatThr : 8; //Threshold for saturation on RF_POWER, reset value: 0xe2, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf105_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF106 0x2418 */
typedef union
{
	uint32 val;
	struct
	{
		int32  inbandRssiSatThr : 9; //Threshold for saturation on inband rssi, reset value: 0x1FC, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf106_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF107 0x241C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 clearAgcTimers : 1; //clear_agc_timers, reset value: 0x0, access type: WO
		uint32 clearAgcAccOut : 1; //clear_agc_acc_out, reset value: 0x0, access type: WO
		uint32 clearAgcMaskOp : 1; //clear_agc_mask_op, reset value: 0x0, access type: WO
		uint32 reserved0 : 29;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf107_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF108 0x2420 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1AccMaskOpAdd : 1; //Rx AGC ant1 accelerator mask cmd, reset value: 0x0, access type: RO
		uint32 ant2AccMaskOpAdd : 1; //Rx AGC ant2 accelerator mask cmd, reset value: 0x0, access type: RO
		uint32 ant3AccMaskOpAdd : 1; //Rx AGC ant3 accelerator mask cmd, reset value: 0x0, access type: RO
		uint32 ant4AccMaskOpAdd : 1; //Rx AGC ant4 accelerator mask cmd, reset value: 0x0, access type: RO
		uint32 accAutoCloseModeAdd : 1; //Rx AGC accelerator auto close mode, reset value: 0x0, access type: RW
		uint32 reserved0 : 3;
		uint32 algoutDiffOneAdd : 1; //Rx AGC accelerator output differ one status, reset value: 0x0, access type: RO
		uint32 reserved1 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf108_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF109 0x2424 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1AgcStmRdbackAdd : 6; //Rx AGC Acc0 state readback, reset value: 0x0, access type: RO
		uint32 reserved0 : 2;
		uint32 ant2AgcStmRdbackAdd : 6; //Rx AGC Acc1 state readback, reset value: 0x0, access type: RO
		uint32 reserved1 : 2;
		uint32 ant3AgcStmRdbackAdd : 6; //Rx AGC Acc2 state readback, reset value: 0x0, access type: RO
		uint32 reserved2 : 2;
		uint32 ant4AgcStmRdbackAdd : 6; //Rx AGC Acc3 state readback, reset value: 0x0, access type: RO
		uint32 reserved3 : 2;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf109_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF10A 0x2428 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 bbRssiIirPoleAdd : 4; //Rx AGC bb rssi iir pole, reset value: 0x0, access type: RW
		uint32 bbRssiIirPoleShiftAdd : 3; //Rx AGC rssi iir pole shift, reset value: 0x0, access type: RW
		uint32 reserved0 : 1;
		uint32 inbandIirPoleAdd : 4; //Rx AGC inband iir pole, reset value: 0x0, access type: RW
		uint32 inbandIirPoleShiftAdd : 3; //Rx AGC inband iir pole shift, reset value: 0x0, access type: RW
		uint32 reserved1 : 17;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf10A_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF10B 0x242C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 bbRssiIirCntGo : 1; //Rx AGC ant1 bb rssi iir go command, reset value: 0x0, access type: WO
		uint32 bbRssiIirCntReset : 1; //Rx AGC ant1 bb rssi iir reset, reset value: 0x0, access type: WO
		uint32 bbRssiIirCounterDone : 1; //Rx AGC ant1 bb rssi iir counter done, reset value: 0x0, access type: RO
		uint32 reserved0 : 29;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf10B_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF10C 0x2430 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 bbRssiIirCounterAdd : 12; //Rx AGC ant1 bb rssi iir counter, reset value: 0x0, access type: RW
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf10C_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF10D 0x2434 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 bbRssiIirCounterRdbackAdd : 12; //Rx AGC ant1 bb rssi iir counter readback, reset value: 0x0, access type: RO
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf10D_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF10E 0x2438 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 inbandIirCntGo : 1; //Rx AGC ib rssi iir go command, reset value: 0x0, access type: WO
		uint32 inbandIirCntReset : 1; //Rx AGC ib rssi iir reset, reset value: 0x0, access type: WO
		uint32 inbandIirCounterDone : 1; //Rx AGC ib rssi iir counter done, reset value: 0x0, access type: RO
		uint32 reserved0 : 29;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf10E_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF10F 0x243C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 inbandIirCounterAdd : 12; //Rx AGC ant1 bb rssi iir counter, reset value: 0x0, access type: RW
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf10F_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF110 0x2440 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 inbandIirCounterRdbackAdd : 12; //Rx AGC ib rssi iir counter readback, reset value: 0x0, access type: RO
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf110_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF111 0x2444 */
typedef union
{
	uint32 val;
	struct
	{
		int32  thSetBbIncGapDb : 6; //th_set_bb_inc_gap_db, reset value: 0x9, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf111_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF112 0x2448 */
typedef union
{
	uint32 val;
	struct
	{
		int32  thSetBbDecGapDb : 6; //th_set_bb_dec_gap_db, reset value: 0x9, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf112_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF113 0x244C */
typedef union
{
	uint32 val;
	struct
	{
		int32  thBbUpExtraGap : 6; //th_bb_up_extra_gap, reset value: 0x4, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf113_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF114 0x2450 */
typedef union
{
	uint32 val;
	struct
	{
		int32  bbPowerUpThrDef : 9; //bb_power_up_thr_def, reset value: 0x1b2, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf114_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF115 0x2454 */
typedef union
{
	uint32 val;
	struct
	{
		int32  bbPowerMinTh : 9; //bb_power_min_th, reset value: 0x101, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf115_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF116 0x2458 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 setBbPowerThCtrlAdd : 4; //set_bb_power_th_ctrl_add, reset value: 0x0, access type: RW
		uint32 reserved0 : 28;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf116_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF117 0x245C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 bbrssiDecimate : 1; //BB RSSI Decimate  by 16/32, reset value: 0x0, access type: RW
		uint32 inbandRssiDecimate : 1; //INBAND RSSI Decimate  by 16/32, reset value: 0x0, access type: RW
		uint32 rfrssiDecimate : 3; //RF RSSI Decimate by 2/4/8/16/32 (0/1/2/3/4), reset value: 0x0, access type: RW
		uint32 rftssiDecimate : 3; //RF TSSI Decimate by 2/4/8/16/32 (0/1/2/3/4), reset value: 0x0, access type: RW
		uint32 dcpowerDecimate : 1; //BB RSSI Decimate by 16/32 (0/1), reset value: 0x0, access type: RW
		uint32 rssiOutputShift : 1; //rssi output shifter, reset value: 0x0, access type: RW
		uint32 rssiDbShift : 1; //rssi_db_shift, reset value: 0x0, access type: RW
		uint32 reserved0 : 1;
		uint32 dcPowerHwCtrl : 4; //select dc from HW: per ant, reset value: 0x0, access type: RW
		uint32 reserved1 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf117_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF118 0x2460 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 latchPripherals : 1; //set data on pripherals to free running: , 1: free running , 0:last value is latched, reset value: 0x1, access type: RW
		uint32 reserved0 : 31;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf118_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF119 0x2464 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 lnaGainCalcCtrlAdd : 4; //Load LNA Gain Enable, reset value: 0x0, access type: RW
		uint32 sysGainCalcCtrlAdd : 4; //Load Sys Gain Enable, reset value: 0x0, access type: RW
		uint32 sysGainInBandCalcCtrlAdd : 4; //Load Sys Gain INBAND Enable, reset value: 0x0, access type: RW
		uint32 sysGainCcaCalcCtrlAdd : 4; //Load Sys Gain CCA Enable, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf119_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF11A 0x2468 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 lnaGainLegacySel0 : 2; //legacy lna select bw, reset value: 0x0, access type: RW
		uint32 lnaGainLegacySel1 : 2; //legacy lna select bw, reset value: 0x0, access type: RW
		uint32 lnaGainLegacySel2 : 2; //legacy lna select bw, reset value: 0x0, access type: RW
		uint32 lnaGainLegacySel3 : 2; //legacy lna select bw, reset value: 0x0, access type: RW
		uint32 lnaGainLegacySel4 : 2; //legacy lna select bw, reset value: 0x0, access type: RW
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf11A_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF11B 0x246C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 lnaGainNonLegacySel0 : 2; //non legacy lna select bw, reset value: 0x0, access type: RW
		uint32 lnaGainNonLegacySel1 : 2; //non legacy lna select bw, reset value: 0x0, access type: RW
		uint32 lnaGainNonLegacySel2 : 2; //non legacy lna select bw, reset value: 0x0, access type: RW
		uint32 lnaGainNonLegacySel3 : 2; //non legacy lna select bw, reset value: 0x0, access type: RW
		uint32 lnaGainNonLegacySel4 : 2; //non legacy lna select bw, reset value: 0x0, access type: RW
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf11B_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF11C 0x2470 */
typedef union
{
	uint32 val;
	struct
	{
		int32  agcBbRfComparisonTh : 10; //Comparison Threshold between RF and BB , reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf11C_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF11D 0x2474 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 agcBbRfCmpMask : 4; //Bit mask for BB RF comparison result, reset value: 0x0, access type: RO
		uint32 reserved0 : 28;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf11D_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF11E 0x2478 */
typedef union
{
	uint32 val;
	struct
	{
		int32  thSetInbandIncGapDb : 6; //th_set_inband_inc_gap_db, reset value: 0x9, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf11E_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF11F 0x247C */
typedef union
{
	uint32 val;
	struct
	{
		int32  thSetInbandDecGapDb : 6; //th_set_inband_dec_gap_db, reset value: 0x9, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf11F_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF120 0x2480 */
typedef union
{
	uint32 val;
	struct
	{
		int32  thInbandUpExtraGap : 6; //th_inband_up_extra_gap, reset value: 0x4, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf120_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF121 0x2484 */
typedef union
{
	uint32 val;
	struct
	{
		int32  inbandPowerUpThrDef : 9; //inband_power_up_thr_def, reset value: 0x1b2, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf121_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF122 0x2488 */
typedef union
{
	uint32 val;
	struct
	{
		int32  inbandPowerMinTh : 9; //inband_power_min_th, reset value: 0x101, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf122_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF123 0x248C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 setInbandPowerThCtrlAdd : 4; //set_inband_power_th_ctrl_add, reset value: 0x0, access type: RW
		uint32 lnaIndexCalcCtrlAdd : 4; //lna_index_calc_ctrl_add , reset value: 0x0, access type: RW
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf123_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF124 0x2490 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 bbPowerThAccGo : 1; //bb_power_th_acc_go, reset value: 0x0, access type: WO
		uint32 inbandPowerThAccGo : 1; //inband_power_th_acc_go, reset value: 0x0, access type: WO
		uint32 reserved0 : 30;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf124_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF125 0x2494 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ssiDecimateOverideEn : 1; //ssi_decimate_overide_en, reset value: 0x0, access type: RW
		uint32 ssiDecimateOveride : 3; //ssi_decimate_overide, reset value: 0x0, access type: RW
		uint32 reserved0 : 28;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf125_u;

/*REG_PHY_RX_AGC_IF_PHY_RXAGC_IF126 0x2498 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 rssiTableSelAnt0 : 2; //rssi table select: 0-BW mode, 1-LNA col1, 2- LNA col2, reset value: 0x0, access type: RW
		uint32 rssiTableSelAnt1 : 2; //rssi table select: 0-BW mode, 1-LNA col1, 2- LNA col2, reset value: 0x0, access type: RW
		uint32 rssiTableSelAnt2 : 2; //rssi table select: 0-BW mode, 1-LNA col1, 2- LNA col2, reset value: 0x0, access type: RW
		uint32 rssiTableSelAnt3 : 2; //rssi table select: 0-BW mode, 1-LNA col1, 2- LNA col2, reset value: 0x0, access type: RW
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxagcIf126_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC140 0x2500 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 gen5Accelerator : 1; //gen5_accelerator, reset value: 0x0, access type: RW
		uint32 reserved0 : 31;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc140_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC141 0x2504 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 agcTableColNum : 8; //Table Min Value x (so first entry will be zero) , , reset value: 0x41, access type: RW
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc141_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC142 0x2508 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 agcTableRowNum : 8; //Table min value y (so first entry will be zero), reset value: 0x64, access type: RW
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc142_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC149 0x2524 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 agcTableRowColMinVal : 8; //min column & row table entry, reset value: 0x0, access type: RW
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc149_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC14A 0x2528 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 agcTableColMaxVal : 8; //max column table entry, reset value: 0x2d, access type: RW
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc14A_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC14B 0x252C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 agcTableRowMaxVal : 8; //max row table entry, reset value: 0x23, access type: RW
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc14B_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC14C 0x2530 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 gainExactCalc : 1; //gain_exact_calc, reset value: 0x0, access type: RW
		uint32 reserved0 : 1;
		uint32 dcMode : 2; //dc_mode, reset value: 0x0, access type: RW
		uint32 forceDcDacs : 2; //force_dc_dacs, reset value: 0x0, access type: RW
		uint32 clearDcDacs : 2; //clear_dc_dacs, reset value: 0x3, access type: RW
		uint32 reserved1 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc14C_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC14D 0x2534 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 tableAccessAntSel : 4; //table_access_ant_sel, reset value: 0x0, access type: RW
		uint32 gainCalcMode : 1; //gain_calc_ant_sel, reset value: 0x0, access type: RW
		uint32 calculatePgc3Only : 1; //calculate_pgc3_only, reset value: 0x0, access type: RW
		uint32 setStep1Gain : 1; //set_step1_gain, reset value: 0x0, access type: RW
		uint32 setMaxGain : 1; //set_max_gain, reset value: 0x0, access type: RW
		uint32 pgc12Mode : 2; //pgc1_2_mode, reset value: 0x0, access type: RW
		uint32 pgc1SetExtraGain : 1; //pgc1_set_extra_gain, reset value: 0x0, access type: RW
		uint32 pgc2SetExtraGain : 1; //pgc2_set_extra_gain, reset value: 0x0, access type: RW
		uint32 calcNewLnaGain : 1; //calc_new_lna_gain, reset value: 0x0, access type: RW
		uint32 setDigitalGain : 1; //set_digital_gain, reset value: 0x0, access type: RW
		uint32 disableRfAccess : 1; //disable rf access, gain calc only, reset value: 0x0, access type: RW
		uint32 tableGo : 1; //table_go, reset value: 0x0, access type: WO
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc14D_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC14E 0x2538 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 enableAgcDigitalGain : 1; //Digital gain from progmodel or accelrator, reset value: 0x0, access type: RW
		uint32 reserved0 : 31;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc14E_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC14F 0x253C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant0GenRiscBbOffset : 8; //G.R BB offset for the input power, reset value: 0x0, access type: RW
		uint32 ant0GenRiscRfOffset : 8; //G.R RF offset for the input power, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc14F_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC150 0x2540 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1GenRiscBbOffset : 8; //G.R BB offset for the input power, reset value: 0x0, access type: RW
		uint32 ant1GenRiscRfOffset : 8; //G.R RF offset for the input power, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc150_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC151 0x2544 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2GenRiscBbOffset : 8; //G.R BB offset for the input power, reset value: 0x0, access type: RW
		uint32 ant2GenRiscRfOffset : 8; //G.R RF offset for the input power, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc151_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC152 0x2548 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3GenRiscBbOffset : 8; //G.R BB offset for the input power, reset value: 0x0, access type: RW
		uint32 ant3GenRiscRfOffset : 8; //G.R RF offset for the input power, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc152_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC157 0x255C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 antIs2Step : 4; //ant_is_2step, reset value: 0x0, access type: RW
		uint32 antRfSaturated : 4; //ant_rf_saturated, reset value: 0x0, access type: RW
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc157_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC158 0x2560 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 rfRssiDirect : 4; //rf_power_direct, reset value: 0x0, access type: RW
		uint32 bbRssiDirect : 4; //bb_power_direct, reset value: 0x0, access type: RW
		uint32 ant0RfPower2Direct : 2; //Table Acc. Read RF_POWER2 directly from HW, reset value: 0x0, access type: RW
		uint32 ant1RfPower2Direct : 2; //Table Acc. Read RF_POWER2 directly from HW, reset value: 0x0, access type: RW
		uint32 ant2RfPower2Direct : 2; //Table Acc. Read RF_POWER2 directly from HW, reset value: 0x0, access type: RW
		uint32 ant3RfPower2Direct : 2; //Table Acc. Read RF_POWER2 directly from HW, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc158_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC159 0x2564 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 minInfRfPower : 8; //min_inf_rf_power, reset value: 0xbf, access type: RW
		uint32 maxInfRfPower : 8; //max_inf_rf_power, reset value: 0xf6, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc159_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC15A 0x2568 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 minInfBbPower : 8; //min_inf_bb_power, reset value: 0xa6, access type: RW
		uint32 maxInfBbPower : 8; //max_inf_bb_power, reset value: 0xf6, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc15A_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC15B 0x256C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ifxMaxPgc1 : 5; //ifx_max_pgc1, reset value: 0x13, access type: RW
		uint32 reserved0 : 3;
		uint32 ifxMaxPgc2 : 4; //ifx_max_pgc2, reset value: 0xb, access type: RW
		uint32 ifxMaxPgc3 : 4; //ifx_max_pgc3, reset value: 0xf, access type: RW
		uint32 reserved1 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc15B_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC163 0x258C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ifxGain1Add : 7; //ifx_gain1_add, reset value: 0x1, access type: RW
		uint32 reserved0 : 25;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc163_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC164 0x2590 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ifxGain2Add : 7; //ifx_gain2_add, reset value: 0x2, access type: RW
		uint32 reserved0 : 25;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc164_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC165 0x2594 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ifxGain3Add : 7; //ifx_gain3_add, reset value: 0x3, access type: RW
		uint32 reserved0 : 25;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc165_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC166 0x2598 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 targetBackoff : 8; //target_backoff, reset value: 0xF1, access type: RW
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc166_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC167 0x259C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ifxDone : 1; //IFX table acc finish getting the gain+DC word + fcsi access, reset value: 0x1, access type: RO
		uint32 ifxAllGainDone : 1; //IFX table acc finish getting the gain+DC word, reset value: 0x1, access type: RO
		uint32 reserved0 : 30;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc167_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC168 0x25A0 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant0RfPowerDirect : 2; //Table Acc. Read RF_POWER directly from HW, reset value: 0x0, access type: RW
		uint32 ant1RfPowerDirect : 2; //Table Acc. Read RF_POWER directly from HW, reset value: 0x0, access type: RW
		uint32 ant2RfPowerDirect : 2; //Table Acc. Read RF_POWER directly from HW, reset value: 0x0, access type: RW
		uint32 ant3RfPowerDirect : 2; //Table Acc. Read RF_POWER directly from HW, reset value: 0x0, access type: RW
		uint32 ant0BbPowerDirect : 2; //Table Acc. Read BB_POWER directly from HW, reset value: 0x0, access type: RW
		uint32 ant1BbPowerDirect : 2; //Table Acc. Read BB_POWER directly from HW, reset value: 0x0, access type: RW
		uint32 ant2BbPowerDirect : 2; //Table Acc. Read BB_POWER directly from HW, reset value: 0x0, access type: RW
		uint32 ant3BbPowerDirect : 2; //Table Acc. Read BB_POWER directly from HW, reset value: 0x0, access type: RW
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc168_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC16A 0x25A8 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 pgc1ExtraGainVal : 3; //Extra gain to PGC1, reset value: 0x6, access type: RW
		uint32 pgc2ExtraGainVal : 3; //Extra gain to PGC2, reset value: 0x6, access type: RW
		uint32 pgc1ExtraGainIdx : 5; //Extra gain PGC1 index, reset value: 0x13, access type: RW
		uint32 reserved0 : 1;
		uint32 pgc2ExtraGainIdx : 4; //Extra gain PGC2 index, reset value: 0xb, access type: RW
		uint32 reserved1 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc16A_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC16B 0x25AC */
typedef union
{
	uint32 val;
	struct
	{
		uint32 maxGainWord : 12; //Holds the max gain word, reset value: 0x0, access type: RW
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc16B_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC16C 0x25B0 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 step1GainWord : 12; //Holds the step1 gain word, reset value: 0x0, access type: RW
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc16C_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC16D 0x25B4 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 step1RfSatGainWord : 12; //step1 gain word in case of RF is saturated, reset value: 0x0, access type: RW
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc16D_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC16F 0x25BC */
typedef union
{
	uint32 val;
	struct
	{
		int32  bbRssiMaxOutput : 9; //Max BB power for RF_RF case, reset value: 0x1fc, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc16F_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC170 0x25C0 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 pgc1OutPowerLimit : 9; //PGC1 max allowed value, reset value: 0x1f7, access type: RW
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc170_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC171 0x25C4 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 agcAccMaxDigitalGain : 5; //Max digital gain index, reset value: 0x6, access type: RW
		uint32 reserved0 : 27;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc171_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC17A 0x25E8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant0GenRiscRfPower : 10; //ant0_gen_risc_rf_power, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc17A_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC17B 0x25EC */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant0GenRiscBbPower : 9; //ant0_gen_risc_bb_power, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc17B_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC17C 0x25F0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant0GenRiscRfRssi : 9; //ant0_gen_risc_rf_rssi, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc17C_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC17D 0x25F4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant0GenRiscBbRssi : 9; //ant0_gen_risc_bb_rssi, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc17D_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC17E 0x25F8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1GenRiscRfPower : 10; //ant1_gen_risc_rf_power, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc17E_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC17F 0x25FC */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1GenRiscBbPower : 9; //ant1_gen_risc_bb_power, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc17F_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC180 0x2600 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1GenRiscRfRssi : 9; //ant1_gen_risc_rf_rssi, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc180_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC181 0x2604 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1GenRiscBbRssi : 9; //ant1_gen_risc_bb_rssi, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc181_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC182 0x2608 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2GenRiscRfPower : 10; //ant2_gen_risc_rf_power, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc182_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC183 0x260C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2GenRiscBbPower : 9; //ant2_gen_risc_bb_power, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc183_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC184 0x2610 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2GenRiscRfRssi : 9; //ant2_gen_risc_rf_rssi, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc184_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC185 0x2614 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2GenRiscBbRssi : 9; //ant2_gen_risc_bb_rssi, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc185_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC186 0x2618 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3GenRiscRfPower : 10; //ant3_gen_risc_rf_power, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc186_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC187 0x261C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3GenRiscBbPower : 9; //ant3_gen_risc_bb_power, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc187_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC188 0x2620 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3GenRiscRfRssi : 9; //ant3_gen_risc_rf_rssi, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc188_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC189 0x2624 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3GenRiscBbRssi : 9; //ant3_gen_risc_bb_rssi, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc189_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC18A 0x2628 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant0AccRfPower : 10; //rf power locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc18A_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC18B 0x262C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant0AccBbPower : 9; //bb power locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc18B_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC18C 0x2630 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant0AccRfRssi : 9; //rf rssi locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc18C_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC18D 0x2634 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant0AccBbRssi : 9; //bb rssi locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc18D_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC18E 0x2638 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1AccRfPower : 10; //rf power locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc18E_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC18F 0x263C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1AccBbPower : 9; //bb power locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc18F_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC190 0x2640 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1AccRfRssi : 9; //rf rssi locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc190_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC191 0x2644 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1AccBbRssi : 9; //bb rssi locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc191_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC192 0x2648 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2AccRfPower : 10; //rf power locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc192_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC193 0x264C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2AccBbPower : 9; //bb power locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc193_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC194 0x2650 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2AccRfRssi : 9; //rf rssi locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc194_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC195 0x2654 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2AccBbRssi : 9; //bb rssi locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc195_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC196 0x2658 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3AccRfPower : 10; //rf power locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc196_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC197 0x265C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3AccBbPower : 9; //bb power locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc197_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC198 0x2660 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3AccRfRssi : 9; //rf rssi locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc198_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC199 0x2664 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3AccBbRssi : 9; //bb rssi locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc199_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1A6 0x2698 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 mixedModeRadarLnaIndex : 3; //ant3_agc_word IFX table ACC result, reset value: 0x0, access type: RW
		uint32 reserved0 : 1;
		uint32 mixedModeRadarPgc2Index : 4; //ant3_agc_word IFX table ACC result, reset value: 0x0, access type: RW
		uint32 reserved1 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1A6_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1A7 0x269C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 mixedModeRadarPgc1IndexStart : 5; //ant3_agc_word IFX table ACC result, reset value: 0x0, access type: RW
		uint32 reserved0 : 3;
		uint32 mixedModeRadarPgc1IndexEnd : 5; //ant3_agc_word IFX table ACC result, reset value: 0x0, access type: RW
		uint32 reserved1 : 19;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1A7_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1A8 0x26A0 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 mixedModeConfig0 : 12; //ant3_agc_word IFX table ACC result, reset value: 0x0, access type: RW
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1A8_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1A9 0x26A4 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 mixedModeConfig1 : 12; //ant3_agc_word IFX table ACC result, reset value: 0x0, access type: RW
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1A9_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1AA 0x26A8 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 mixedModeConfig2 : 12; //ant3_agc_word IFX table ACC result, reset value: 0x0, access type: RW
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Aa_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1AB 0x26AC */
typedef union
{
	uint32 val;
	struct
	{
		uint32 mixedModeConfig3 : 12; //ant3_agc_word IFX table ACC result, reset value: 0x0, access type: RW
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Ab_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1AC 0x26B0 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 mixedModeConfig4 : 12; //ant3_agc_word IFX table ACC result, reset value: 0x0, access type: RW
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Ac_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1AD 0x26B4 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 mixedModeConfig5 : 12; //ant3_agc_word IFX table ACC result, reset value: 0x0, access type: RW
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Ad_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1AE 0x26B8 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 mixedModeConfig6 : 12; //ant3_agc_word IFX table ACC result, reset value: 0x0, access type: RW
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Ae_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1AF 0x26BC */
typedef union
{
	uint32 val;
	struct
	{
		uint32 mixedModeConfig7 : 12; //ant3_agc_word IFX table ACC result, reset value: 0x0, access type: RW
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Af_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1B0 0x26C0 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 mixedModeConfig8 : 12; //ant3_agc_word IFX table ACC result, reset value: 0x0, access type: RW
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1B1 0x26C4 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 mixedModeConfig9 : 12; //ant3_agc_word IFX table ACC result, reset value: 0x0, access type: RW
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1B1_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1B3 0x26CC */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant0LnaIndex : 3; //save lna index, reset value: 0x0, access type: RO
		uint32 reserved0 : 1;
		uint32 ant1LnaIndex : 3; //save lna index, reset value: 0x0, access type: RO
		uint32 reserved1 : 1;
		uint32 ant2LnaIndex : 3; //save lna index, reset value: 0x0, access type: RO
		uint32 reserved2 : 1;
		uint32 ant3LnaIndex : 3; //save lna index, reset value: 0x0, access type: RO
		uint32 reserved3 : 17;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1B3_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1B4 0x26D0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant0GenRiscRfPower2 : 10; //ant0_gen_risc_rf_power2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1B4_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1B5 0x26D4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1GenRiscRfPower2 : 10; //ant1_gen_risc_rf_power2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1B5_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1B6 0x26D8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2GenRiscRfPower2 : 10; //ant2_gen_risc_rf_power2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1B6_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1B7 0x26DC */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3GenRiscRfPower2 : 10; //ant3_gen_risc_rf_power2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1B7_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1B8 0x26E0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant0AccRfPower2 : 10; //rf power2 locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1B8_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1B9 0x26E4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1AccRfPower2 : 10; //rf power2 locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1B9_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1BA 0x26E8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2AccRfPower2 : 10; //rf power2 locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Ba_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1BB 0x26EC */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3AccRfPower2 : 10; //rf power2 locked val at table go, reset value: 0x0, access type: ROS
		uint32 reserved0 : 22;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Bb_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1BC 0x26F0 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 maxDigitalGain : 5; //Max Gain step Digital gain shifter, reset value: 0x0, access type: RW
		uint32 step1DigitalGain : 5; //Step 1 Digital gain shifter, reset value: 0x0, access type: RW
		uint32 step1RfSatDigitalGain : 5; //Step 1 RF sat Digital gain shifter, reset value: 0x0, access type: RW
		uint32 reserved0 : 17;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Bc_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1BD 0x26F4 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant0Gain0Word : 12; //ant0_agc_word IFX table ACC result : , gen4:{pgc3[3:0],pgc2[2:0],pgc1[2:0],lna[1:0]} , gen5:{pgc2[3:0],pgc1[4:0],lna[2:0]}, reset value: 0x0, access type: RO
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Bd_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1BE 0x26F8 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant0Gain1Word : 16; //ant0_agc_word IFX table ACC result, reset value: 0x0, access type: RO
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Be_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1BF 0x26FC */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant0Gain2Word : 16; //ant0_agc_word IFX table ACC result, reset value: 0x0, access type: RO
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Bf_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C0 0x2700 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant0Gain3Word : 16; //ant0_agc_word IFX table ACC result, reset value: 0x0, access type: RO
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1C0_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C1 0x2704 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1Gain0Word : 12; //ant1_agc_word IFX table ACC result : , gen4:{pgc3[3:0],pgc2[2:0],pgc1[2:0],lna[1:0]} , gen5:{pgc2[3:0],pgc1[4:0],lna[2:0]}, reset value: 0x0, access type: RO
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1C1_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C2 0x2708 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1Gain1Word : 16; //ant1_agc_word IFX table ACC result, reset value: 0x0, access type: RO
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1C2_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C3 0x270C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1Gain2Word : 16; //ant1_agc_word IFX table ACC result, reset value: 0x0, access type: RO
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1C3_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C4 0x2710 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1Gain3Word : 16; //ant1_agc_word IFX table ACC result, reset value: 0x0, access type: RO
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1C4_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C5 0x2714 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2Gain0Word : 12; //ant2_agc_word IFX table ACC result : , gen4:{pgc3[3:0],pgc2[2:0],pgc1[2:0],lna[1:0]} , gen5:{pgc2[3:0],pgc1[4:0],lna[2:0]}, reset value: 0x0, access type: RO
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1C5_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C6 0x2718 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2Gain1Word : 16; //ant2_agc_word IFX table ACC result, reset value: 0x0, access type: RO
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1C6_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C7 0x271C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2Gain2Word : 16; //ant2_agc_word IFX table ACC result, reset value: 0x0, access type: RO
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1C7_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C8 0x2720 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2Gain3Word : 16; //ant2_agc_word IFX table ACC result, reset value: 0x0, access type: RO
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1C8_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1C9 0x2724 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3Gain0Word : 12; //ant3_agc_word IFX table ACC result : , gen4:{pgc3[3:0],pgc2[2:0],pgc1[2:0],lna[1:0]} , gen5:{pgc2[3:0],pgc1[4:0],lna[2:0]}, reset value: 0x0, access type: RO
		uint32 reserved0 : 20;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1C9_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1CA 0x2728 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3Gain1Word : 16; //ant3_agc_word IFX table ACC result, reset value: 0x0, access type: RO
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Ca_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1CB 0x272C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3Gain2Word : 16; //ant3_agc_word IFX table ACC result, reset value: 0x0, access type: RO
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Cb_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1CC 0x2730 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3Gain3Word : 16; //ant3_agc_word IFX table ACC result, reset value: 0x0, access type: RO
		uint32 reserved0 : 16;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Cc_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1CD 0x2734 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 reserved0 : 8;
		uint32 loadDigitalGainDef : 1; //preload digital gain default, reset value: 0x0, access type: WO
		uint32 reserved1 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Cd_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1CE 0x2738 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1SysGainOffsetAdd : 6; //Rx AGC ant1 system gain calc offset, reset value: 0x0, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Ce_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1CF 0x273C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1SysGainInBandOffsetAdd : 6; //Rx AGC ant1 inband system gain calc offset, reset value: 0x0, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Cf_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D0 0x2740 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1SysGainCcaOffsetAdd : 6; //Rx AGC ant1 system gain dc cca calc offset, reset value: 0x0, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1D0_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D1 0x2744 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2SysGainOffsetAdd : 6; //Rx AGC ant2 system gain calc offset, reset value: 0x0, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1D1_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D2 0x2748 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2SysGainInBandOffsetAdd : 6; //Rx AGC ant2 inband system gain calc offset, reset value: 0x0, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1D2_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D3 0x274C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2SysGainCcaOffsetAdd : 6; //Rx AGC ant2 system gain dc cca calc offset, reset value: 0x0, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1D3_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D4 0x2750 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3SysGainOffsetAdd : 6; //Rx AGC ant3 system gain calc offset, reset value: 0x0, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1D4_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D5 0x2754 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3SysGainInBandOffsetAdd : 6; //Rx AGC ant3 inband system gain calc offset, reset value: 0x0, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1D5_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D6 0x2758 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3SysGainCcaOffsetAdd : 6; //Rx AGC ant3 system gain dc cca calc offset, reset value: 0x0, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1D6_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D7 0x275C */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4SysGainOffsetAdd : 6; //Rx AGC ant4 system gain calc offset, reset value: 0x0, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1D7_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D8 0x2760 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4SysGainInBandOffsetAdd : 6; //Rx AGC ant4 inband system gain calc offset, reset value: 0x0, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1D8_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1D9 0x2764 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant4SysGainCcaOffsetAdd : 6; //Rx AGC ant4 system gain dc cca calc offset, reset value: 0x0, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1D9_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E0 0x2780 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 gspSwEn : 1; //Gain Switching points SW Threshold enable, reset value: 0x0, access type: RW
		uint32 reserved0 : 3;
		uint32 lnaGainsNumber : 3; //Number of the LNA Gains (EXT/INT), reset value: 0x0, access type: RW
		uint32 reserved1 : 25;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1E0_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E1 0x2784 */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5LnaGspTh1 : 6; //Gain Switching points SW Threshold1 , reset value: 0x0, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1E1_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E2 0x2788 */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5LnaGspTh2 : 6; //Gain Switching points SW Threshold2, reset value: 0x3, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1E2_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E3 0x278C */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5LnaGspTh3 : 6; //Gain Switching points SW Threshold3, reset value: 0x8, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1E3_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E4 0x2790 */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5LnaGspTh4 : 6; //Gain Switching points SW Threshold4, reset value: 0xa, access type: RWS
		uint32 reserved0 : 26;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1E4_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E5 0x2794 */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5LnaGsp0 : 8; //Gain Switching points 0, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1E5_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E6 0x2798 */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5LnaGsp1 : 8; //Gain Switching points 1, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1E6_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E7 0x279C */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5LnaGsp2 : 8; //Gain Switching points 2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1E7_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E8 0x27A0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5LnaGsp3 : 8; //Gain Switching points 3, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1E8_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1E9 0x27A4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5LnaGsp4 : 8; //Gain Switching points 4, reset value: 0x0, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1E9_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1EA 0x27A8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5LnaGspRfTh : 8; //Gain Switching points RF Input Threshold, reset value: 0xce, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Ea_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1EB 0x27AC */
typedef union
{
	uint32 val;
	struct
	{
		int32  pgc1LimitRfTh : 8; //RF Threshold for PGC1 gain limit accelerator, reset value: 0xce, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Eb_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1EC 0x27B0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  pgc1LimitBbTh : 8; //BB Threshold for PGC1 gain limit accelerator, reset value: 0xba, access type: RWS
		uint32 reserved0 : 24;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Ec_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1ED 0x27B4 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 pgc1LimitCalcEnable : 1; //Accelerator enable, reset value: 0x0, access type: RW
		uint32 pgc1LimitSwEn : 1; //pgc1_limit SW Threshold enable, reset value: 0x0, access type: RW
		uint32 reserved0 : 30;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Ed_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1EE 0x27B8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5Pgc1LimitTh1 : 7; //PGC1 Limit calculation Threshold1 , reset value: 0x0, access type: RWS
		uint32 reserved0 : 25;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Ee_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1EF 0x27BC */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5Pgc1LimitTh2 : 7; //PGC1 Limit calculation Threshold2, reset value: 0x3, access type: RWS
		uint32 reserved0 : 25;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Ef_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F0 0x27C0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5Pgc1LimitTh3 : 7; //PGC1 Limit calculation Threshold3, reset value: 0x8, access type: RWS
		uint32 reserved0 : 25;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1F0_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F1 0x27C4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5Pgc1LimitTh4 : 7; //PGC1 Limit calculation Threshold4, reset value: 0x10, access type: RWS
		uint32 reserved0 : 25;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1F1_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F2 0x27C8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5Pgc1LimitSet0 : 9; //pgc1_limit set 0, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1F2_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F3 0x27CC */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5Pgc1LimitSet1 : 9; //pgc1_limit set 1, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1F3_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F4 0x27D0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5Pgc1LimitSet2 : 9; //pgc1_limit set 2, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1F4_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F5 0x27D4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5Pgc1LimitSet3 : 9; //pgc1_limit set 3, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1F5_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F6 0x27D8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  gen5Pgc1LimitSet4 : 9; //pgc1_limit set 4, reset value: 0x0, access type: RWS
		uint32 reserved0 : 23;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1F6_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F7 0x27DC */
typedef union
{
	uint32 val;
	struct
	{
		uint32 agcDcCancellationMode : 1; //allow digital dc cancellation, reset value: 0x0, access type: RW
		uint32 reserved0 : 31;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1F7_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F8 0x27E0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant0RadarDcOffsetI : 11; //dc offset I for radar, reset value: 0x0, access type: ROS
		uint32 reserved0 : 21;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1F8_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1F9 0x27E4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant0RadarDcOffsetQ : 11; //dc offset Q for radar, reset value: 0x0, access type: ROS
		uint32 reserved0 : 21;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1F9_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1FA 0x27E8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1RadarDcOffsetI : 11; //dc offset I for radar, reset value: 0x0, access type: ROS
		uint32 reserved0 : 21;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Fa_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1FB 0x27EC */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant1RadarDcOffsetQ : 11; //dc offset Q for radar, reset value: 0x0, access type: ROS
		uint32 reserved0 : 21;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Fb_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1FC 0x27F0 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2RadarDcOffsetI : 11; //dc offset I for radar, reset value: 0x0, access type: ROS
		uint32 reserved0 : 21;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Fc_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1FD 0x27F4 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant2RadarDcOffsetQ : 11; //dc offset Q for radar, reset value: 0x0, access type: ROS
		uint32 reserved0 : 21;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Fd_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1FE 0x27F8 */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3RadarDcOffsetI : 11; //dc offset I for radar, reset value: 0x0, access type: ROS
		uint32 reserved0 : 21;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Fe_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC1FF 0x27FC */
typedef union
{
	uint32 val;
	struct
	{
		int32  ant3RadarDcOffsetQ : 11; //dc offset Q for radar, reset value: 0x0, access type: ROS
		uint32 reserved0 : 21;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc1Ff_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC200 0x2800 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant0DigitalGainDef : 5; //ant0 digital gain default, reset value: 0x0, access type: RW
		uint32 reserved0 : 27;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc200_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC201 0x2804 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1DigitalGainDef : 5; //ant1 digital gain default, reset value: 0x0, access type: RW
		uint32 reserved0 : 27;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc201_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC202 0x2808 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2DigitalGainDef : 5; //ant2 digital gain default, reset value: 0x0, access type: RW
		uint32 reserved0 : 27;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc202_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC203 0x280C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3DigitalGainDef : 5; //ant3 digital gain default, reset value: 0x0, access type: RW
		uint32 reserved0 : 27;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc203_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC204 0x2810 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant0DigitalGain : 5; //Digital gain ant0, reset value: 0x0, access type: RO
		uint32 reserved0 : 27;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc204_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC205 0x2814 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant1DigitalGain : 5; //Digital gain ant1, reset value: 0x0, access type: RO
		uint32 reserved0 : 27;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc205_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC206 0x2818 */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant2DigitalGain : 5; //Digital gain ant2, reset value: 0x0, access type: RO
		uint32 reserved0 : 27;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc206_u;

/*REG_PHY_RX_AGC_IF_PHY_RXTD_AGC_ACC207 0x281C */
typedef union
{
	uint32 val;
	struct
	{
		uint32 ant3DigitalGain : 5; //Digital gain ant3, reset value: 0x0, access type: RO
		uint32 reserved0 : 27;
	} bitFields;
} RegPhyRxAgcIfPhyRxtdAgcAcc207_u;



#endif // _PHY_RX_AGC_IF_REGS_H_
